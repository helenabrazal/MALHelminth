# MALHelminth Project

# Prep environment ----------------------------------------------------------------------------------------

# Directory
setwd("C:/MALHelminth project/Paper1/MALHelminth_serology")

# Packages
{library(pacman)
  p_load(scales, gridExtra, gtsummary, flextable, RColorBrewer, GGally, car, tidymodels, dotwhisker, tidyverse, gt,broom)}

# Read in full raw data to extract outcome data
outcome_data <- read.csv("C:/MALHelminth project/Paper1/MALHelminth_serology/mergeData_coinfections_only.csv", stringsAsFactors = F)

# Read in epi covariates
covariate_data <- read.csv("C:/MALHelminth project/Paper1/MALHelminth_serology/covariate_data_complete.csv", stringsAsFactors = F)

# Bind outcome and covariate data
coinfection_data <- outcome_data %>% 
  left_join(covariate_data, by = "Sample")

coinfection_data <- na.omit(coinfection_data)

#recode time_to_water to reduce levels
unique (coinfection_data$time_to_water)

coinfection_data <- coinfection_data %>%   
  mutate(time_to_water = case_when(
    time_to_water %in% c("<5_minutes", "5-10_minutes", "10-14_minutes") ~ "<15 minutes",
    time_to_water == "15-30_minutes" ~ "15-30 minutes",
    time_to_water == ">30_minutes" ~ ">30 minutes",
    TRUE ~ time_to_water # this ensures that other values remain unchanged
  ))


unique (coinfection_data$water_contact)

coinfection_data <- coinfection_data %>%   
  mutate(water_contact = case_when(
    water_contact %in% c("Never", "Rarely") ~ "Rarely",
    water_contact == "Monthly" ~ "Unfrequently",
    water_contact %in% c("Weekly", "Daily") ~ "Frequently",
    TRUE ~ water_contact # this ensures that other values remain unchanged
  ))


coinfection_data <- na.omit(coinfection_data)
# Select coinfection variable and covariates
outcome_vars <- coinfection_data[, 56:59]  # Assuming columns 3 to 26 are outcomes for MFIs
explanatory_vars <- coinfection_data[, 60:81]  # Assuming columns 60 to 81 are explanatory variables

#having more than one net seems to be very correlated with net available so we will remove more_than_one_net 
explanatory_vars <- explanatory_vars %>% select(-more_than_one_net)

# Prepare data ---------------------------------------------------------------------------------------
#combine outcome and explanatory vars
# Get outcome variable names
outcome_var_names <- names(outcome_vars)

# Get explanatory variable names
explanatory_var_names <- names(explanatory_vars)
# Define outcome variables


#Check if factor and define reference factor before regression
# Update this list based on the variables you expect to be factors
explanatory_vars <- explanatory_vars %>%
  mutate(
    age_cat = as.factor(age_cat),
    study_site = as.factor(study_site),
    house_ownership = as.factor(house_ownership),
    house_material = as.factor(house_material),
    net_holes = as.factor(net_holes),
    net_used = as.factor(net_used),
    toilet_type = as.factor(toilet_type),
    wash_hands = as.factor(wash_hands),
    water_contact = as.factor(water_contact),
    water_source = as.factor(water_source),
    shoe_wearing = as.factor(shoe_wearing),
    child_sex = as.factor(child_sex),
    electricity = as.factor(electricity),
    radio = as.factor(radio),
    motorbike = as.factor(motorbike),
    space_between_walls = as.factor(space_between_walls),
    net_available = as.factor(net_available),
    hand_wash_area = as.factor(hand_wash_area),
    freq_wash_before_eat = as.factor(freq_wash_before_eat),
    time_to_water = as.factor(time_to_water),
    eat_soil = as.factor(eat_soil)
  )

#Set baseline reference level for those variables with more than 2 factors (protective values)

# Define the function to preprocess factor variables and set reference levels
preprocess_factors <- function(data) {
  data %>%
    mutate(
      age_cat = relevel(as.factor(age_cat), ref = " Preschool children (< 5)"),
      study_site = relevel(as.factor(study_site), ref = "Diourbel"),
      house_ownership = relevel(as.factor(house_ownership), ref = "Own_house"),
      house_material = relevel(as.factor(house_material), ref = "Cement"),
      net_holes = relevel(as.factor(net_holes), ref = "No"),
      net_used = relevel(as.factor(net_used), ref = "Every_night"),
      toilet_type = relevel(as.factor(toilet_type), ref = "Private_toilet"),
      wash_hands = relevel(as.factor(wash_hands), ref = "Water_and_soap"),
      water_contact = relevel(as.factor(water_contact), ref = "Unfrequently"),
      water_source = relevel(as.factor(water_source), ref = "Private_source"),
      shoe_wearing = relevel(as.factor(shoe_wearing), ref = "Closed_shoes"),
      child_sex = relevel(as.factor(child_sex), ref = "Female"),
      electricity = relevel(as.factor(electricity), ref = "Yes"),
      radio = relevel(as.factor(radio), ref = "Yes"),
      motorbike = relevel(as.factor(motorbike), ref = "Yes"),
      space_between_walls = relevel(as.factor(space_between_walls), ref = "No"),
      net_available = relevel(as.factor(net_available), ref = "No"),
      hand_wash_area = relevel(as.factor(hand_wash_area), ref = "No"),
      freq_wash_before_eat = relevel(as.factor(freq_wash_before_eat), ref = "Always"),
      time_to_water = relevel(as.factor(time_to_water), ref = "<15 minutes"),
      eat_soil = relevel(as.factor(eat_soil), ref = "No")
    )
}
# Preprocess the factor variables in the dataset
coinfection_data <- preprocess_factors(coinfection_data)

# Create a function to perform univariate regression for each outcome variable
run_univariate_models <- function(outcome_var_name) {
  formulas <- explanatory_var_names %>% 
    str_c(outcome_var_name, " ~ ", .) # Create formulas for each explanatory variable
  
  models <- formulas %>% 
    map(
      .f = ~glm( # Run glm for each formula
        formula = as.formula(.x),
        family = "binomial",
        data = coinfection_data
      )
    ) %>% 
    map(
      .f = ~tidy(
        .x,
        exponentiate = TRUE,
        conf.int = TRUE
      )
    ) %>% 
    bind_rows() %>% 
    mutate(across(where(is.numeric), round, digits = 2)) %>% 
    mutate(outcome_var = outcome_var_name) # Add outcome variable name
  
  return(models)
}


# Loop over all outcome variables and run the univariate models
univar_results <- outcome_var_names %>% 
  map_dfr(run_univariate_models)

# View the results
print(univar_results)

write.csv(univar_results, file="C:/MALHelminth project/Paper1/MALHelminth_serology/univariate_log_results_coinfections.csv")

# Multivariate regression ---------------------------------------------------------------------------------------

# Load necessary libraries
library(broom)
library(dplyr)
library(MASS)  # For AIC-based model selection

# Define function for AIC-based backward elimination and fitting logistic regression model
run_multiple_logistic_regression <- function(outcome_var_name) {
  tryCatch({
    # Construct the formula for logistic regression
    formula <- as.formula(
      paste(outcome_var_name, "~", paste(names(explanatory_vars), collapse = " + "))
    )
    
    # Check if the formula is valid
    print(paste("Fitting model for outcome:", outcome_var_name))
    print(formula)
    
    # Fit the full logistic regression model
    full_model <- glm(
      formula,
      family = "binomial",
      data = coinfection_data
    )
    
    # Perform backward elimination using AIC
    selected_model <- MASS::stepAIC(full_model, direction = "backward", trace = FALSE)
    
    # Tidy up the results (exponentiate to get odds ratios, include confidence intervals)
    result <- broom::tidy(
      selected_model,
      exponentiate = TRUE,
      conf.int = TRUE
    ) %>%
      mutate(outcome_var = outcome_var_name)  # Add outcome variable name for reference
    
    return(result)
    
  }, error = function(e) {
    message("Error in model for outcome variable: ", outcome_var_name)
    message("Error message: ", e$message)
    return(NULL)  # Return NULL in case of error
  })
}

# Run regression models outcome by outcome

results_list <- list()

for (outcome in outcome_var_names) {
  print(paste("Running model for outcome:", outcome))
  result <- run_multiple_logistic_regression(outcome)
  if (!is.null(result)) {
    results_list[[outcome]] <- result
  }
}

# Combine all the results into one data frame
multiple_logistic_results <- bind_rows(results_list, .id = "outcome_var")

# Check if the results are created and non-empty
if (nrow(multiple_logistic_results) > 0) {
  
  # Holm-Bonferroni correction
  # Sort p-values in increasing order and apply the Holm-Bonferroni correction
  multiple_logistic_results <- multiple_logistic_results %>%
    dplyr::mutate(rank = rank(p.value, ties.method = "first")) %>%  # Rank the p-values
    dplyr::mutate(holm_pvalue = p.adjust(p.value, method = "holm")) # Apply Holm-Bonferroni correction
  
  # Remove the rank column if not needed
  multiple_logistic_results <- dplyr::select(multiple_logistic_results, -rank)
  
  # Print and save the final results with corrected p-values
  print(multiple_logistic_results)
  write.csv(multiple_logistic_results, file = "C:/MALHelminth project/Paper1/MALHelminth_serology/multiple_log_results_coinfections_confounder.csv", row.names = FALSE)
  
} else {
  message("No results to save or there was an issue with the models.")
}

