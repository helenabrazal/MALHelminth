setwd("C:/MALHelminth project/Paper1/MALHelminth_serology")

# Packages
{library(pacman)
  p_load(scales, cowplot, ggplot2, tidyverse, dplyr, ggpubr, patchwork, scales,  reshape2, patchwork)}

# Data
mergeData <- read.csv("C:/MALHelminth project/Paper1/MALHelminth_serology/mergeData.csv")

###make age categories based on epidemiological risk factors (school vs preschool children)

mergeData <- mergeData[!is.na(mergeData$age_an), ]
mergeData <- mergeData[!is.na(mergeData$Sexe), ]

mergeData <- mergeData %>%   
  mutate(Age_category = case_when(
    age_an < 5 ~ " Preschool children (< 5)",
    age_an > 4 ~ "School children(> 5)"  ))

mergeData <- mergeData %>%
  mutate(Gender = case_when(
    Sexe == "F" ~ "Female",
    Sexe == "M" ~ "Male",
  ))

## Rename variables before plotting
mergeData <- mergeData %>%
  rename(
    "C.parvum exposure" = cryptosporidium_pos,
    "P. falciparum seroprotection" = malaria_protect_pos,
    "Recent P. falciparum exposure" = malaria_recent_pos,
    "S.stercoralis exposure" = Strongyloides_pos,
    "Historical P. falciparum exposure"= malaria_historical_pos,
    "S.mansoni exposure" = Smansoni_pos,
    "N.americanus exposure" = necator_pos,
    "T.solium exposure" = taenia_pos,
    "G.lamblia  exposure" = giardia_pos,
    "C.parvum" = cryptosporidium_MFI,
    "P. falciparum protection" = malaria_protect_MFI,
    "Recent P. falciparum" = malaria_recent_MFI,
    "S.stercoralis" = Strongyloides_MFI,
    "Historical P. falciparum"= malaria_historical_MFI,
    "S.mansoni" = Smansoni_MFI,
    "N.americanus" = necator_MFI,
    "T.solium" = taenia_MFI,
    "G.lamblia" = giardia_MFI
  )


#########plot seroprevalences of single antigens##

##create unique variable long format for plotting
dataLong_pos <- mergeData%>% 
  pivot_longer(cols = "C.parvum exposure":"G.lamblia  exposure") %>% 
  rename("pos" = "value", "Pathogen"= "name")


dataLong_pos <- dataLong_pos %>%
  filter(Age_category != "")%>%
  filter(Gender != "")%>%
  filter(Site != "")

###plot seroprevalences by age###############

#calculate seroprevalences and 95% CI
unique(dataLong_pos$Age_category)

percentage_pos_age <- dataLong_pos %>%
  group_by(Pathogen, Age_category) %>%
  summarize(
    prop_1 = mean(pos == 1) * 100,
    lower_ci = binom.test(sum(pos == 1), length(pos))$conf.int[1] * 100,
    upper_ci = binom.test(sum(pos == 1), length(pos))$conf.int[2] * 100
  )


# Define original colors
colors <- c("#339999", "#003333")

# Create lighter versions by adjusting transparency (alpha)
lighten_colors <- alpha(colors, alpha = 0.75)  # Adjust alpha to make the colors lighter

# Plot the percentages of seropositives by age
pos_age <- ggplot(percentage_pos_age, aes(x = Pathogen, y = prop_1, fill = Age_category, label = sprintf("%.1f%%", prop_1))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), position = position_dodge(width = 0.9), width = 0.25) +
  geom_text(position = position_dodge(width = 0.9), vjust = -3.75, size = 4) +
  labs(title = "Percentage of seropositive cases by age category",
       y = "Percentage of seropositive individuals") +
  scale_color_manual(values = lighten_colors) +
  scale_fill_manual(values = lighten_colors) +
  theme(panel.background = element_blank(), axis.title.x=element_blank(),axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),
        legend.text = element_text(size=17), legend.title = element_blank(),
        axis.title.y=element_text(size = 15),axis.text.y = element_text(size = 15),
        title = element_text(face="bold", size = 15)) +
  ylim(0, 100)  # Set y-axis limits



###plot seroprevalences by gender###############

#calculate seroprevalences and 95% CI
unique(dataLong_pos$Gender)


percentage_pos_gender <- dataLong_pos %>%
  group_by(Pathogen, Gender) %>%
  summarize(
    prop_1 = mean(pos == 1) * 100,
    lower_ci = binom.test(sum(pos == 1), length(pos))$conf.int[1] * 100,
    upper_ci = binom.test(sum(pos == 1), length(pos))$conf.int[2] * 100
  )

## Plot the percentages of seropositives by gender

pos_gender <- ggplot(percentage_pos_gender, aes(x = Pathogen, y = prop_1, fill = Gender, label = sprintf("%.1f%%", prop_1))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), position = position_dodge(width = 0.9), width = 0.25) +
  geom_text(position = position_dodge(width = 0.9), vjust = -3.75, size = 4) +
  labs(title = "Percentage of seropositive cases by gender assigned at birth",
       y = "Percentage of seropositive individuals") +
  scale_color_manual(values = lighten_colors) +
  scale_fill_manual(values = lighten_colors) +
  theme(panel.background = element_blank(), axis.title.x=element_blank(),axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),
        legend.text = element_text(size=17), legend.title = element_blank(),
        axis.title.y=element_text(size = 15),axis.text.y = element_text(size = 15),
        title = element_text(face="bold", size = 15)) +
  ylim(0, 100)  # Set y-axis limits

###plot seroprevalences by Site###############

#calculate seroprevalences and 95% CI
unique(dataLong_pos$Site)

percentage_pos_site <- dataLong_pos %>%
  group_by(Pathogen, Site) %>%
  summarize(
    prop_1 = mean(pos == 1) * 100,
    lower_ci = binom.test(sum(pos == 1), length(pos))$conf.int[1] * 100,
    upper_ci = binom.test(sum(pos == 1), length(pos))$conf.int[2] * 100
  )


## Plot the percentages of seropositives by site

pos_site <- ggplot(percentage_pos_site, aes(x = Pathogen, y = prop_1, fill = Site, label = sprintf("%.1f%%", prop_1))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), position = position_dodge(width = 0.9), width = 0.25) +
  geom_text(position = position_dodge(width = 0.9), vjust = -3.75, size = 4) +
  labs(title = "Percentage of seropositive cases by site",
       y = "Percentage of seropositive individuals",
       x = NULL) +
  scale_color_manual(values = lighten_colors) +
  scale_fill_manual(values = lighten_colors) +
  theme(panel.background = element_blank(), axis.title.x=element_blank(),axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),
        legend.text = element_text(size=17), legend.title = element_blank(),
        axis.title.y=element_text(size = 15),axis.text.y = element_text(size = 15),
        title = element_text(face="bold", size = 15)) +
  ylim(0, 100)  # Set y-axis limits

#combine plots ensuring 3 plots in 2 rows

combined_plot_pos<-pos_age + pos_gender + pos_site +  plot_layout(nrow = 2, byrow = FALSE)

ggsave("pos_levels.png", combined_plot_pos, width = 22, height = 15, dpi = 300)


##### Plot MFI Values #####
pivot_longer(cols = "Cp17":"VSP3", names_to = "Antigen", values_to = "MFI") %>%
  filter(!is.na(Site) & Site != "" & !is.na(Gender) & Gender != "") %>%
  mutate(MFI = as.numeric(MFI))

# Transform data

dataLong_summ <- mergeData %>%
  pivot_longer(cols = "C.parvum":"G.lamblia", names_to = "Pathogen", values_to = "MFI_sum") %>%
  filter(!is.na(Site) & Site != "" & !is.na(Gender) & Gender != "") %>%
  mutate(MFI_sum = as.numeric(MFI_sum))

# Define plot function
plot_mfi <- function(data, fill_var, title) {
  ggplot(data, aes(x = Site, y = MFI_sum, fill = !!sym(fill_var))) +
    geom_boxplot() +
    scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
    facet_wrap(~ Pathogen) +
    scale_fill_manual(values = c("#33999955", "#00333355")) +
    theme(panel.background = element_blank(), axis.title.x=element_blank(),axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),
          legend.text = element_text(size=15), legend.title = element_blank(),
          axis.title.y=element_text(face = "bold",size = 15),axis.text.y = element_text(face = "bold",size = 15)) +
    ylab("Log10 Mean MFI") +
    labs(x = NULL, y = "Log MFI", title = title) +
    stat_compare_means(aes(group = !!sym(fill_var)), method = "t.test", label = "p.signif", vjust = 0.5, label.x = 1.5, label.y = 7) +
    labs(fill = fill_var)
}

# Generate plots
age_plots <- plot_mfi(dataLong_summ, "Age_category", "IgG antibody levels by age across sites")
gender_plots <- plot_mfi(dataLong_summ, "Gender", "IgG antibody levels by gender assigned at birth across sites")

print(age_plots)
print(gender_plots)

# Combine plots
age_plots + gender_plots + plot_layout(nrow = 2, byrow = FALSE)

# Define violin plot function
plot_violin <- function(data, x_var, fill_var, title) {
  ggplot(data, aes(x = Pathogen, y = MFI_sum, fill = !!sym(fill_var))) +
    geom_violin(position = position_dodge(width = 0.7)) +
    geom_boxplot(width = 0.2, position = position_dodge(width = 0.6)) +
    scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
    scale_fill_manual(values = c("#33999955", "#00333355")) +
    theme(panel.background = element_blank(), axis.title.x=element_blank(),axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),
          legend.text = element_text(size=15), legend.title = element_blank(),
          axis.title.y=element_text(face = "bold",size = 15),axis.text.y = element_text(face = "bold",size = 15)) +
    ylab("Log10 MFI") +
    labs(y = "Log MFI", title = title) +
    stat_compare_means(aes(group = !!sym(fill_var)), method = "t.test", label = "p.signif", vjust = 0.5, position = "identity") +
    labs(fill = paste0(fill_var, " group"))
}

# Generate violin plots
age_violin <- plot_violin(dataLong_summ, "Age_category", "Age_category", "IgG antibody levels by age group")
gender_violin <- plot_violin(dataLong_summ, "Gender", "Gender", "IgG antibody levels by gender assigned at birth")
site_violin <- plot_violin(dataLong_summ, "Site", "Site", "IgG antibody levels by site")

# Combine plots
combined_plot_IgG<-age_violin + gender_violin + site_violin+plot_layout(nrow = 3, byrow = FALSE)

ggsave("IgG_levels.png", combined_plot_IgG, width = 22, height = 15, dpi = 300)


############create heatmaps with log MFI data distribution geographically

# Filter out rows with "#N/A" in the "Site" variable
# Filter out data
epiData_filtered <- dataLong_summ %>%
  filter(mif_village != "#N/A")

# Calculate mean MFI value
epiData_filtered <- epiData_filtered %>%
  group_by(mif_village, Site, Pathogen) %>%
  mutate(mean_mfi = mean(MFI_sum)) %>%
  arrange(Site)


table(epiData_filtered$Pathogen)
# Specify the desired order for Pathogen
desired_order <- c("C.parvum", "G.lamblia", "Historical P. falciparum", 
                   "P. falciparum protection", "Recent P. falciparum", 
                   "N.americanus", "S.mansoni", "S.stercoralis", "T.solium")

# Create the pathogen_type classification 
epiData_filtered <- epiData_filtered %>%
  mutate(Pathogen = factor(Pathogen, levels = desired_order),
         pathogen_type = case_when(
           Pathogen %in% c("C.parvum", "G.lamblia") ~ "Intestinal protozoa",
           Pathogen %in% c("Historical P. falciparum", "P. falciparum protection", "Recent P. falciparum") ~ "Malaria",
           Pathogen %in% c("N.americanus", "S.mansoni", "S.stercoralis", "T.solium") ~ "Helminths"
         ))

# Modify Pathogen column to be a factor with specified levels
epiData_filtered <- epiData_filtered %>%
  mutate(Pathogen = factor(Pathogen, levels = desired_order))

# Use only village names for y-axis labels
epiData_filtered <- epiData_filtered %>%
  mutate(Village_Label = mif_village)  # Only keep the village name

# Create the heatmap plot with faceting by both Site and Pathogen Type
heatmap <- ggplot(epiData_filtered, aes(x = Pathogen, y = Village_Label, fill = mean_mfi)) +
  geom_tile() +
  scale_fill_gradient(low = "yellow", high = "blue", trans = "log10", 
                      name = "Log Mean MFI",
                      labels = scales::label_number(scale = 1, accuracy = 0.01)) +
  labs(x = "Antibody levels", y = "Village") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(face = "bold", angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
    axis.text.y = element_text(size = 10),  # Adjust y-axis label size
    strip.text.y = element_text(face = "bold", size = 12, angle = 0),  # Rotate y-axis labels to 45 degrees
    strip.text.x = element_text(face = "bold", size = 12)  # Adjust pathogen type label appearance on x-axis
  ) +
  facet_grid(Site ~ pathogen_type, scales = "free", space = "free")  # Facet by both Site and Pathogen Type

# Print the heatmap
print(heatmap)

# Define the file path for saving the heatmap
file_path <- "heatmap.png"

# Save the heatmap as a high-resolution PNG file
ggsave(filename = file_path, plot = heatmap, width = 12, height = 10, dpi = 300)
###########Correlation matrix to see which ab levels correlate more

library(Hmisc)
# Select the relevant columns for plotting
data_subset <- mergeData %>% select(28:35)

# Calculate the Pearson correlation matrix and p-values
correlation_test <- rcorr(as.matrix(data_subset), type = "pearson")
cor_matrix <- correlation_test$r
p_matrix <- correlation_test$P

# Convert the correlation matrix and p-value matrix to long format
cor_matrix_melted <- melt(cor_matrix, varnames = c("Var1", "Var2"))
p_matrix_melted <- melt(p_matrix, varnames = c("Var1", "Var2"))

# Merge the correlation and p-value data frames
cor_p_combined <- merge(cor_matrix_melted, p_matrix_melted, by = c("Var1", "Var2"))
names(cor_p_combined) <- c("Var1", "Var2", "Correlation", "p_value")

# Plotting all correlations with an indication of significance
plot_all <- ggplot(data = cor_p_combined, aes(Var1, Var2, fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(midpoint = 0, low = "steelblue", mid = "white", high = "darkred", limits = c(-1, 1)) +
  geom_text(aes(label = ifelse(p_value < 0.05, "*", "")), color = "black", size = 5) +
  theme_minimal() +
  labs(title = "Pearson Correlation Matrix (All)", x = "Antibody levels", y = "Antibody levels") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  coord_fixed()

# Filter for significant correlations (p < 0.05)
significant_correlations <- cor_p_combined %>% filter(p_value < 0.05)

# Plotting the significant correlations with ggplot2
plot_significant <- ggplot(data = significant_correlations, aes(Var1, Var2, fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(midpoint = 0, low = "steelblue", mid = "white", high = "darkred", limits = c(-1, 1)) +
  theme_minimal() +
  labs(title = "Significant Pearson Correlation Matrix (p < 0.05)", x = "Antibody levels", y = "Antibody levels") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  coord_fixed()

# Combine plots using cowplot
combined_plot <- plot_grid(plot_all, plot_significant, labels = c("A", "B"), ncol = 2)

# Save combined plot
ggsave("combined_correlation_matrices.png", combined_plot, width = 14, height = 7, dpi = 300)
